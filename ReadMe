React Native Coding Assignments
Simple Counter App
Problem Statement: Create a screen with: - A number displayed in the center. - Two buttons: + and -. - Tapping the buttons increments or decrements the count.
Concepts Practiced: - useState - Handling events - Basic styling
Personalized Greeting Component
Problem Statement: Build a GreetingCard component that: - Takes name and message as props. - Displays them inside a styled card.
Render 3 GreetingCard components with different props.
Concepts Practiced: - Props - Reusable components - JSX
Toggle Visibility
Problem Statement: Create a button that toggles the visibility of a text block: - Button text alternates between “Show Details” and “Hide Details.” - When visible, show some sample description text.
Concepts Practiced: - useState - Conditional rendering
Timer Component
Problem Statement: Create a timer that: - Starts counting seconds as soon as the component mounts. - Displays the elapsed time. - Stops counting when the component unmounts.
Concepts Practiced: - useEffect - Cleanup in useEffect
Input Handling
Problem Statement: Build a screen with: - A TextInput for entering a name. - A button to submit. - When submitted, display: “Hello, [name]!”
Concepts Practiced: - useState for input - Controlled components
Todo List
Problem Statement: Create a simple todo list: - TextInput to enter a todo item. - Button to add to the list. - Display the list below. - Each item should have a “Delete” button.
Concepts Practiced: - useState with arrays - Mapping over data - Handling multiple actions
Responsive Card Grid
Problem Statement: Create a screen showing 6 cards in a grid layout: - Each card has a title and description. - Cards should wrap responsively based on screen width.
Concepts Practiced: - Flexbox styling - Arrays of styles
Memoized Component
Problem Statement: Build a parent component that: - Contains a counter and a text input. - Passes props to a child component that displays the text. - Use React.memo to prevent the child from re-rendering when only the counter changes.
Concepts Practiced: - React.memo - Props comparison - Performance optimization
Custom Hook (useFetch)
Problem Statement: Write a custom hook useFetch that: - Takes a URL. - Fetches data when mounted. - Returns loading, data, and error.
Use it to display a list of users from: https://jsonplaceholder.typicode.com/users
Concepts Practiced: - Custom hooks - useEffect for side effects - API calls
Dark Mode Toggle
Problem Statement: Create a screen with: - A toggle switch to turn dark mode on/off. - Change background and text colors based on the toggle.
Concepts Practiced: - useState - Dynamic styles
